1.2.1

[+] introduced COLLATE NU630 to SQLite extension - Unicode 6.3.0
    case-sensitive collation
[+] introduced COLLATE NU630_NOCASE to SQLite extension - Unicode 6.3.0
    case-insensitive collation

[-] removed deprecated sqlite3_extension_init() in favor
    of sqlite3_nunicode_init()

[*] COLLATE NUNICODE is removed in favor of COLLATE NU630
[*] COLLATE NOCASE is removed in favor of COLLATE NU630_NOCASE

1.2

[*] nu's sqlite3_extension_init() is now deprecated in
    favor of sqlite3_nunicode_init()
[*] renamed nunicode_sqlite3_init() into
    nunicode_sqlite3_static_init()

[+] introduced compound read (decode) iterators to reduce internal
    complexity of collation

[*] fixed several build options handling
[*] codepoint compare functions replaced with codepoint weighting 
    functions
[*] faster MPH lookup
[*] collation migrated to reduced DUCET

1.1.2

[+] nu_strrchr (collation)
[+] nu_strtransformlen (extra)

[*] SQLite3 extension updated with new nu_strtransformlen
[*] improved documentation

1.1.1

[+] fixed amd64 library size issue
[+] introduced nunicode_sqlite3_init() for SQLite3 autoextension

[*] some SQLite3 samples

1.1

[+] strings encoding validation
[+] nu_strbytelen (strings)
[+] nu_strcoll (collation)
[+] nu_strchr redone for (collation)
[+] nu_strstr (collation)
[+] nu_toupper/nu_tolower (collation)
[+] UTF-16HE/UTF-32HE
[+] sqlite3 extension: COLLATE NOCASE, COLLATE NUNICODE,
    like(), upper(), lower()

[*] nu_utf16_read_bom() and nu_utf32_read_bom() will
    default encoding to BE if BOM is not present in
    string

1.0

[-] removed strrchr (strings)

0.9

[*] added extra error checking until validation is released
[*] changed BOM detection interface

0.8

[+] UTF-8
[+] CESU-8
[+] UTF-16
[+] UTF-32
[+] nu_strlen, nu_strchr, nu_strrchr (strings)
[+] reverse reading
