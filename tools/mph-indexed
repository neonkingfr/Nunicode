#!/usr/bin/python
#-*- coding: UTF-8

# VALUES_I is holding final values (weights), VALUES_C is holding original
# Unicode codepoints for collision detection

import sys
import mph


def usage():
	print 'usage: %s <TAG>' % sys.argv[0]

if __name__ == '__main__':
	if len(sys.argv) < 2:
		usage()
		sys.exit(1)

	TAG = sys.argv[1]

	dict = {}

	for i, line in enumerate(sys.stdin):
		codepoint, replacement = filter(bool, line.strip().split(' '))

		if not replacement:
			continue

		replacement = int(replacement.strip(), base=16)
		dict[codepoint] = (codepoint, replacement)

	(G, V) = mph.create_minimal_perfect_hash(dict)

	assert(len(G) == len(V))

	mph.gen_includes()

	print "#ifndef NU_WITH_BMP_ONLY"
	print

	mph.gen_header(TAG, G, [])
	mph.gen_G(TAG, G)
	mph.gen_values(TAG, G, V, False)

	print "#endif /* NU_WITH_BMP_ONLY */"

	drop = []
	for key in dict:
		if int(key, base=16) > 0xFFFF:
			drop.append(key)

	for key in drop:
			del dict[key]

	(G, V) = mph.create_minimal_perfect_hash(dict)
	assert(len(G) == len(V))

	print
	print '#ifdef NU_WITH_BMP_ONLY'
	print
	print '''/* %d codepoints were removed from original set because they're outside of BMP */''' % (len(drop),)
	print

	mph.gen_header(TAG, G, [])
	mph.gen_G(TAG, G)
	mph.gen_values(TAG, G, V, True)

	print '#endif /* NU_WITH_BMP_ONLY */'
