#!/usr/bin/python
#-*- coding: UTF-8

import sys
import time

from coldata import *


def tab(s, tabs=1):
	return '\t' * tabs + s


def gen_header(tag, contractions):
	print '''/* Automatically generated file (contractions-totests), %d
*
* Tag          : %s
* Contractions : %d
*/''' % (time.time(), tag, len(contractions))
	print


def gen_includes():
	print '#include <assert.h>'
	print '#include <stddef.h>'
	print '#include <stdint.h>'
	print
	print '#include "switch_test_base.h"'
	print


def gen_weights_test(tag, cotractions):
	def expand_contraction(contraction, weight):
		joined = ', '.join('0x%06X' % int(point, base=16) for point in contraction)
		print tab('{ 0x%06X, 0, %d, (uint32_t[%d]){ %s, },  },' % (weight,
																len(contraction),
																len(contraction),
																joined), 2)

	print 'extern int32_t %s_weight_switch(uint32_t u, int32_t *w, void *context);' % (tag)
	print
	print 'static const nu_codepoint_weight_t weight = %s_weight_switch;' % (tag)
	print

	print 'void test_%s_weight_switch() {' % (tag)
	print tab('typedef struct {')
	print tab('int32_t weight; int32_t rollback; size_t len; uint32_t *seq;', 2)
	print tab('} _contraction_test_t;')
	print
	print tab('const _contraction_test_t contractions[] = {')

	for contraction, weight in contractions:
		expand_contraction(contraction, weight)

	print tab('};')
	print tab('const size_t contractions_num = sizeof(contractions) / sizeof(*contractions);')
	print
	print tab('size_t i = 0; for (; i < contractions_num; ++i) {')
	print tab('int32_t r = 0;', 2)
	print tab('int32_t w = _nu_test_contraction_weight(weight, contractions[i].seq, contractions[i].len, &r);', 2)
	print tab('assert(w == contractions[i].weight);', 2)
	print tab('assert(r == contractions[i].rollback);', 2)
	print tab('}')
	print '}'


def usage():
	print 'usage: ' + sys.argv[0] + ' [CODEPOINTS] [CONTRACTIONS] [TAG]'
	print
	print '[CODEPOINTS]   - filename with list of codepoints'
	print '[CONTRACTIONS] - filename with list of contractions from the same collation'
	print '[TAG]          - prefix to weighting switch'


if __name__ == '__main__':
	if len(sys.argv) < 4:
		usage()
		sys.exit(1)

	tag = sys.argv[3]
	codepoints_file, contractions_file = sys.argv[1], sys.argv[2]

	codepoints, contractions = collect_contractions(codepoints_file, contractions_file)
	gen_header(tag, contractions)
	gen_includes()
	gen_weights_test(tag, contractions)
